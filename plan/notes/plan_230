MATH230: Logic, Automata, and Computability                       Project began: 1st December 2021

Notes from meeting with Walter Guttmann.

  I am free to cut down on content in order to be more effective.
  As long as predicate logic is covered CS (Walter) is happy.

[ ]: Develop a plan for design under the assumption I am teaching the entire course.

  I have to meet the following course description

  "An introduction to various formal logics, the theory of automata, and the theoretical limitations of the computer."

  * Idea is to take a historical approach. Consider the problems that motivated the theory and the solutions given. *

    [ ]: Reading

        [ ]: Formal Logic, Burgess
        [ ]: The Annotated Turing, Petzold
        [ ]: Elements of Mathematics, Stillwell
        [ ]: Lectures on the Philosophy of Mathematics, Hamkins
        [ ]: Automata and Computability, Kozen
        [ ]: Discrete Mathematics with Applications, Epp


  [ ]: Which topics do I want to include?

    [ ]: Logic

      So long as there are "various formal logics" and a focus on predicate logic, then I am free to do whatever.
      Guttmann wants students to "DO" induction proofs. Induction on what?

    [ ]: Models of computation and automata

    [ ]: Theoretical limitations of logic and computing

      Turing's proof of HALTing problem and, as a result, Godel's incompletness theorem.


Notes from reading:

  Lectures on the Philosphy of Mathematics, Hamkins

    Q: What does it mean for a procedure/function to be computable?

      A: We have intuitive feel for this: carry out some number of steps and arrive at the output.

      A': But this raises more questions, like; how many steps? which steps? Can we be more precise
          about what computation is and how we do it?

      Godel: Primitive recursive functions.
      Turing: Turing machines.
      Church: Lambda calculus
      ... Other models.

    Q: Given that there are many models of computation, which one should we use? How similar are they?
    Q: Have we arrived at "the definition" of computation? Have we got it correct? How can we tell?

        [ ]: Kurt Godel on Primitive Recursive Functions

          Briefly: we can define "computable" (in some obvious intuitive sense) primitive functions and "computable" actions on those primitives.
          Every function obtained therefrom will hence be "computable" by extension. Despite the obvious/intuitive definition, a rich class
          of functions are captured - much of mathematics in fact!

        [ ]: Alan Turing on Computability

          In the first instance Turing Machines are designed to compute (partial) functions from N to N.

           Turing Machine:

              [ ]: Input - specified by n 1s at the start of a (potentially) infinite strip.
              [ ]: State - finite list of states (free to choose before beginning) the Machine can be in.
              [ ]: Output - read from the left most part of the strip.

              Note: There are many variations on the Turing Machine Theme. More tapes. Larger alphabet... In some real
                    sense none of that variation matters. These variations might be easier to program or compute faster.
                    But the computable functions are the same in the end. That's what we're interested in here.

                    [[!]]: This means I have to pick a model for the course.

          UNIVERSALITY:
          Each function f: N --> N seems to require a purpose built Turing Machine to compute it. If indeed the function
          is computable. However, Turing saw that universality could be obtained. Turing Machines within' Turing Machines.

          HIGH LEVEL ARGUEMENTS:
          Turing Machines are not meant to be used to compute anything. They are a conceptual tool for analysing the
          theory of computation.


Exercises for students (and me!):

  [ ]: Recursive functions

    [ ]: Show arithmetic is primitive recursive
    [ ]: Show logic is (to what extent?) primitive recursive

  [ ]: Turing machines

    [ ]: Write the successor function on a Turing Machine
    [ ]: Write arithmetic on Turing Machines
    [ ]: Write logic on Turing Machines
    [ ]: Detect parity (even/odd) with Turing Machine

    [ ]: Detect equality with a Turing Machine
    [ ]: Detect divisibility with a Turing Machine [[!]]

    [ ]: Write a Turing Machine that prints "Hello world!" and then HALTS.


*** Hilbert's Problems, Consistency, and Foundations of Mathematics ***

    Q: What is the historical background (context) from which all of these ideas came into being?

        Reading:

            [ ]: Chapter 7 - Lectures on the Philosophy of Mathematics, Hamkins.

                Notes from

            [ ]: Chapter 5 - Mathematical Logic and the Foundations of Mathematics, Kneebone.

                Notes from

            [ ]:           - Introduction to the Foundations of Mathematics, Wilder.

                Notes from Section 2.5 in Wilder.

                  Good discussions on consistency, completness, satisfiability, models.
                  Should refer to these later.

        "Every demonstrable science must start with indemonstrable principles.
         Otherwise, the steps of demonstration would be endless" --- Aristotle.

        If you want to gain knowledge about a subject, through argumentation, then you have to
        begin from some base of understanding. An argument for one proposition, uses others.
        These must be argued for. So on. The Ancient Greeks knew this, as evidenced by the openning
        quote of Aristotle [reference]. Moreover Euclid of Alexandria published a text on which
        all of mathematics was based; from just a handful of "axioms" and "common postulates" that
        encapsulated their understanding of geometric methods.

          [Comment on the Munchausen Trilemma]

        In the two millenia separating us from those mathematicians of Ancient Greece, much has
        been expanded upon by many mathematicians after them. In short, many things whose nature
        cannot be encapsulated by the axioms and postulates presented by them in The Elements.

        The introduction of algebra, coordinates, and the methods of calculus. Non-Euclidean
        Geometries, infinite series, and imaginary numbers. This rich tapestry of mathematics, built over millenia can't rely on the Euclid alone. But, all knowledge must start with indemonstrable principles.

        Note: Ancient Greeks too noticed problems with their axioms. What is clear and common to some, may not be to all. Euclid's Fifth Postulate caused controversy that was only resolved some two millenia after he published it.

        Humans have developed, over millenia, a vast field of study: Mathematics. Where the topics and considerations were once quite concrete and "of the real world", now they are abstract and seem to be ever more so abstracted from the real world.

        Intuitions we have about the real world can't be used to judge the truth/validity/consistency of mathematical statements like: * Enter complicated statements here *

        Where mathematicians previously focused on points and lines; circles and squares (think Euclid) we now wonder about Galois representations, modular forms, and Riemann surfaces.

              Q: What *are* these things?
              Q: How do we know that what we're saying about them is correct?
              Q: How is it that we gain knowledge about mathematics?

        With such questions we are pushing into Philosophy. I won't talk much about philosophy, but I will bring up the following point - something I think all undergrads (humans?) should be mindful of: *Munchausen Trilemma*

        It pays to remember our understanding of mathematics has been informed by this foundational work, so things that seem obvious to us weren't so in the 1800s and early 1900s.

                          *** Foundational Crisis of Mathematics ***

        The collective uncertainty amoung some (many, but not all) mathematicians about these issues has been called the Foundational Crisis of Mathematics. This course will outline some of the mathematics that was developed
        in response to this crisis. Ultimately unveiling many interesting facts about mathematics and computation and creating the field of Computer Science. Not to mention laying the foundations for the creation of the modern computer!

        These seemingly elementary considerations have had an uncalculable effect on human society.

        In Logic we distinguish the form of the argument from the meaning of the argument.
        Formally we distinguish validity (syntax) and soundness (semantics).

        We can use logic to understand the syntactic validity of an argument. More has to be employed to get at the semantic soundness - we need to give the symbols meaning.

        Topics to cover

            Logic
              [ ]: We need a language to frame our theory in: logic.
              [ ]: Historically logic grew from analysing arguments
              [ ]: Natural language and the need to formalise
              [ ]: Propositional logic (obtaining new knowledge from old)
                Focus on validity. Explicitly exclude Truth, for now. Just look at the
                syntactic form of the argument. (Signature = non-logical symbols)
                Obvious axioms. Move to concise list.
              [ ]: Truth tables
                [ ]: Disjunctive normal form
                [ ]: Universal connectives: NAND is universal, NOR is universal.
              [ ]: Natural deduction or semantic tableaux?
              [ ]: Predicate logic
              [ ]: Completeness

              [ ]: Not strong enough to do any (interesting) mathematics

              [ ]: (Robinson? and?) Peano Arithmetic (with and without induction)
              [ ]: ZF set theory (with/without choice)

            Computability

              [ ]: Talk about decidability in terms of logic
              [ ]: Recursive functions (Godel)
              [ ]: Turing machines (Turing)
              [ ]: Lambda calculus (Church)
              [ ]: Briefly mention other models of computation (push to tutorials)
              [ ]: Address questions raised earlier about mathematics
                  [ ]: HALTing problem
                  [ ]: Incompletness Theorem

            Extra time
              [ ]: Godel Incompletness: what is means and doesn't mean (c.f. completness)
              [ ]: Lean via natural numbers game (automatic proof more generally)
              [ ]: Godels "extra axioms" reaction to his independence result
              [ ]: How to think about incompletness and axioms (Multiverse, Hamkins)
              [ ]: Gentzen's proof of the consistency of Peano Axioms



What is the difference between: syntactic vs semantic completeness.
